# -*- coding: utf-8 -*-
"""Code_Matt_Goldfarb (Project 2, Fractals)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XysC2CaVxqY52EvzjtdPKZI8ug6KQ4oZ
"""

#1
#Non-attractive fixed point
#p(z)=z and it must be greater than

#p(z)=z**2+.25
#p'(z)=2*z

#z**2+.25=z
#z**2-z+.25=0
#z=.5
#p'(.5)=1

#Non-attractive fixed point: .5

#1
def compnum(c):
    x=(1+(1-4*c)**(.5))/2
    y=(1-(1-4*c)**(.5))/2
    a=x*2
    b=y*2
    if abs(a)>=1:
        result= x
    if abs(a)<1:
        result= None
    if abs(b)>=1:
        result2= y
    if abs(b)<1:
        result2= None
    return result, result2
compnum(complex(0,1))

#2
def julia(c,n):
    y=[]
    if n==0:
        current=compnum(c)
        for i in range(2):
            if i==0:
                if (current[i])==None:
                    ()
                else:
                    if abs(current[i])<2:
                        y.append(current[i])
            if i==1:
                if (current[i])==None:
                    break
                else:
                    if current[0]!=current[1]:
                        if abs(current[1])<2:
                            y.append(current[1])
        return y
    s1=julia(c,n-1)
    s2=[]
    for i in s1:
        sol1=((i-c)**.5)
        sol2=(-1*(i-c)**.5)
        s2.append(sol1)
        s2.append(sol2)
    return s2
julia(complex(0,1),2)

#3
import matplotlib.pyplot as plt
import numpy as np
def plot(points):
    d=np.array(points)
    x=d.real
    y=d.imag
    plt.scatter(x,y)
    plt.show
plot(julia(complex(.25,0),20))

plot(julia(complex(0,1),20))

plot(julia(complex(-.12,.74),20))

#4
import numpy as np
def implot(lower,upper,subs,x,n):
    results=np.zeros((subs,subs))
    o=julia(x,n)
    x=[]
    y=[]
    for i in range(len(o)):
        x.append(o[i].real)
        y.append(o[i].imag)
    points=[]
    points1=[]
    if lower<0:
        upper1=abs(lower)+upper
        lower1=abs(lower)+lower
    if lower>=0:
        upper1=upper-abs(lower)
        lower1=abs(lower)-lower
    s1=[]
    s2=[]
    for i in range(len(x)):
        if lower<0:
            s1.append(x[i]+abs(lower))
            s2.append(y[i]+abs(lower))
        if lower>=0:
            s1.append(x[i]-abs(lower))
            s2.append(y[i]-abs(lower))
    for i in range(len(s1)):
        points.append((s1[i]/upper1)*subs)
        points1.append((s2[i]/upper1)*subs)
    r1=[]
    r2=[]
    for i in range(len(points)):
        r1.append(round(points[i]))
        r2.append(round(points1[i]))
    for k in range(len(r1)):
        for i in range(subs):
            for j in range(subs):
                if i==r1[k] and j==r2[k]:
                    results[j,i]=1
    return results
plt.imshow(implot(-2,2,100,complex(0,1),20))

#5c
import random
def compnum1(c):
    k=random.random()
    x=(1+(1-4*c)**(.5))/2
    y=(1-(1-4*c)**(.5))/2
    a=x*2
    b=y*2
    if abs(a)>=1:
        result= x
    if abs(a)<1:
        result= None
    if abs(b)>=1:
        result2= y
    if abs(b)<1:
        result2= None
    if result!=None and result2!=None:
        if k<.5:
            return result
        if k>=.5:
            return result2
    if result==None and result2!=None:
        return result2
    if result!=None and result2==None:
        return result


import random
def julia1(c,n):
    y=[]
    if n==0:
        current=compnum1(c)
        if abs(current)<2:
            y.append(current)
        return y
    s1=julia1(c,n-1)
    s2=[]
    for i in s1:
        sol1=((i-c)**.5)
        sol2=(-1*(i-c)**.5)
        s2.append(sol1)
        s2.append(sol2)
    return s2
compnum1(complex(0,1))
compnum(complex(0,1))
julia1(complex(0,1),0)

import matplotlib.pyplot as plt
import numpy as np
def plotimshow(points):
    d=np.array(points)
    x=d.real
    y=d.imag
    plt.scatter(x,y)
plot(julia1(complex(0,1),10))

plot(julia(complex(0,1),10))